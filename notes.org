.* TODO Add a check-hash command to lovett CLI tool                  :feature:
* Docs                                                                  :doc:
** TODO Convert docs to RST, host on readthedocs
** TODO Use ArgDoc
https://github.com/chriskiehl/ArgDoc
* TODO Convert to python2/3 compat with six
* TODO Use argh for annotald-aux
* Versioning
Use =git describe= or similar.
* TODO Add deploy hooks
- ReadTheDocs
- Travis-CI (with deploy to pypi)
* TODO switch to lodash
* Using a data-binding library
After exploring the idea of using a data-binding library such as [[http://www.ractivejs.org/][Ractive]]
for Annotald’s UI, I’ve decided against it.  This is because in the JS
object, we’d need to maintain parent references, a burdensome task.
This is handled in the DOM automatically (and efficiently), however.
The current plan is to make use of more structured DOM representations,
with data-* attributes, in conjunction with Shadow DOM/Web Components
inspired ideas for presenting UI elements.  (Or just hack it with
onchange events and DOM munging.)
* PSDX format
- Define format (XML schema)
- Write up- and down-converters in lovett (release lovett)
  - add a lovett command line tool which reindents, checks trees, checks
    hashes, ...
- Support this format in Annotald 2
** Format ideas

Doc structure <doc><header></hdr><trees></trees></doc>

In header:
- file-level info (corpus name, version, etc.)
- hash
- info about metadata fields: what type (string, bool, choice, etc.),
  what vals are allowed
  - can we use embedded xml schema for this?
  - can we use xml include to have this info represented once for a
    many-file corpus
    - or should corpora be distributed as a single file??? (gzipped?)
*** Notion of scopes
Allow a scope tag inside trees, which wraps some trees and assigns their
metadata (e.g. author) jointly

How to edit? -> each scope has a name, annotald lets you open just a
single scope within a file?  Or: scopal metadata vals show up in
metadata editor (in separate section to indicate they are scope and not
tree-level)  But: how to delimit a scope?  Manually (by editing as text?
a bad idea if it can be cleverly avoided)?

inheritance of metadata:
- tree
- scopes, nestedly
- file-level
* Annotald 2 features
- PSDX support
- revamped frontend code (data-* attributes instead of mov’t indices as
  text, e.g.)
- works in node-webkit and from server
  - explore moving to node.js as server backend
    - drawback: harder to install on legacy systems (babel)
* For DIGS workshop
- TogetherJS
- metadata editor
* Brainstorming TogetherJS
1. make the site usable as statically served JS
2. integrate with various ways of getting the file into the page
   1. Fetch from web via Ajax
   2. Fetch from github with its API
      - Then upload changes to repo
   3. Upload from computer
      - Then download to save again?
      - With multi-user syncing via WebRTC?
      - Store intermediate data in localStorage, with export page to
        download changed files?
   4. Local files
      - use node-webkit to create a thin wrapper which:
        - allows read/write of local files
        - downloads and caches the JS files from the server
** Other TODOs
- log multiuser joins and leaves in event journal
* TODO add .dir-locals.el with js2 mode local var decls
* var -> let?
* Jasmine plugins
- (node)-jasmine-jquery
- jasmine-expect
- jasmine-as-promised
* Emacs setup
- beefy + live reload script
- skewer mode (see also: jss, swank-js)
- create special html template to set debug variables and load main js
- tern, lintnode
* webrtc notes
https://www.webrtc-experiment.com/DataChannel/
https://github.com/erbbysam/webRTCCopy
http://bloggeek.me/send-file-webrtc-data-api/
https://github.com/Peer5/Sharefest
* jsgit
https://github.com/creationix/js-git
* other
http://www.lucaongaro.eu/blog/2012/12/02/easy-two-way-data-binding-in-javascript/
http://ericbidelman.tumblr.com/post/23615290220/data-binding-using-data-attributes
list of resources realted to web components: https://gist.github.com/ebidel/6314025
resumable uploads: http://resumablejs.com/
* things needed for deploying to website
- minify and combine css
- minify and combine js
- do above with sourcemaps
* idea for download fn
http://www.phpied.com/files/react/src/table2.js
* intro.js
* for github file browser
use jqtree http://mbraak.github.io/jqTree/
https://stackoverflow.com/questions/14731459/github-api-fetch-all-folders-and-files-in-single-get-request
also: google drive file picker https://gist.github.com/Daniel15/5994054
* alternate notification lib
https://github.com/naoxink/notifIt
* router
https://github.com/andreypopp/react-router-component
* grunt tips
** Supercharging your Gruntfile
   [[http://www.html5rocks.com/en/tutorials/tooling/supercharging-your-gruntfile/][Supercharging your Gruntfile]]
